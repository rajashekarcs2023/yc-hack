#!/usr/bin/env python3
"""
Test proper Notion writing by extracting the actual markdown content
"""

import asyncio
import json
from datetime import datetime
from dedalus_notion_tool import NotionMCPTool

async def test_proper_notion_write():
    """Extract proper content and write feedback"""
    
    print("üìñ Testing proper Notion write...")
    
    try:
        notion_tool = NotionMCPTool()
        pixelpilot_page_id = "258bd31b-99b8-80b3-9a92-ffbbadb0b85f"
        
        # Fetch the page content
        result = await notion_tool.fetch_notion_page(pixelpilot_page_id)
        
        if result.get("success"):
            content = result.get("content", "")
            
            # Extract text content
            if isinstance(content, list) and len(content) > 0:
                raw_text = content[0].text if hasattr(content[0], 'text') else str(content[0])
            else:
                raw_text = str(content)
            
            # Parse the JSON to get the actual markdown content
            try:
                parsed = json.loads(raw_text)
                actual_content = parsed.get("text", "")
                
                # Extract content between <content> tags
                if "<content>" in actual_content and "</content>" in actual_content:
                    start = actual_content.find("<content>") + len("<content>")
                    end = actual_content.find("</content>")
                    markdown_content = actual_content[start:end].strip()
                else:
                    markdown_content = actual_content
                
                print(f"üìÑ Actual markdown content preview:")
                print("-" * 50)
                print(markdown_content[:300])
                print("-" * 50)
                
                # Find a good anchor point in the markdown
                lines = markdown_content.split('\n')
                anchor_line = None
                
                for line in lines:
                    if line.strip() and (line.startswith('#') or len(line.strip()) > 10):
                        anchor_line = line.strip()
                        break
                
                if anchor_line:
                    # Use first ~10 chars and last ~10 chars for anchor
                    if len(anchor_line) > 20:
                        anchor = anchor_line[:10] + "..." + anchor_line[-10:]
                    else:
                        anchor = anchor_line + "..."
                    
                    print(f"üéØ Using anchor: {anchor}")
                    
                    timestamp = datetime.now().isoformat()[:19]
                    test_feedback = f"""

## Feedback - {timestamp}

IMPLEMENTATION SUMMARY
=====================

SPEC COMPLIANCE: 8/10 (Successful Write Test)

WHAT'S WORKING:
- Notion MCP connection ‚úÖ
- Content extraction ‚úÖ
- Anchor point detection ‚úÖ
- Write functionality ‚úÖ

WHAT'S MISSING/NEEDS IMPROVEMENT:
- Integration with Agent 3

RECOMMENDATIONS FOR NEXT ITERATION:
- Test complete Agent 3 workflow
- Verify feedback integration

PRIORITY: HIGH - Write test successful!

---
*Generated by PixelPilot Agent 3 Browser Testing - Write Test*
"""
                    
                    await notion_tool._ensure_connected()
                    
                    write_result = await notion_tool.session.call_tool("notion-update-page", {
                        "data": {
                            "page_id": pixelpilot_page_id,
                            "command": "insert_content_after",
                            "selection_with_ellipsis": anchor,
                            "new_str": test_feedback
                        }
                    })
                    
                    print(f"üìù Write result isError: {write_result.isError}")
                    
                    if not write_result.isError:
                        print("‚úÖ Feedback successfully written to Notion!")
                        return True
                    else:
                        error_text = write_result.content[0].text if write_result.content else "Unknown error"
                        print(f"‚ùå Write failed: {error_text}")
                        return False
                else:
                    print("‚ùå No suitable anchor found in markdown content")
                    return False
                    
            except json.JSONDecodeError:
                print("‚ùå Failed to parse JSON content")
                return False
        else:
            print("‚ùå Failed to fetch page content")
            return False
            
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        try:
            await notion_tool.exit_stack.aclose()
        except:
            pass

if __name__ == "__main__":
    result = asyncio.run(test_proper_notion_write())
    print(f"\nüéØ Test Result: {'SUCCESS' if result else 'FAILED'}")
