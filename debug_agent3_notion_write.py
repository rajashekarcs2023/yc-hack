#!/usr/bin/env python3
"""
Debug Agent 3 Notion writing by running the subprocess code directly
"""

import asyncio
import json
from datetime import datetime
from dedalus_notion_tool import NotionMCPTool

async def debug_agent3_notion_write():
    """Debug the exact subprocess code from Agent 3"""
    
    print("üîç Debugging Agent 3 Notion write subprocess...")
    
    try:
        notion_tool = NotionMCPTool()
        pixelpilot_page_id = "258bd31b-99b8-80b3-9a92-ffbbadb0b85f"
        
        timestamp = datetime.now().isoformat()[:19]
        feedback_content = f"""

## Feedback - {timestamp}

IMPLEMENTATION SUMMARY
=====================

SPEC COMPLIANCE: 8/10 (Debug Test)

WHAT'S WORKING:
- Testing debug subprocess

WHAT'S MISSING/NEEDS IMPROVEMENT:
- Need to verify actual write

RECOMMENDATIONS FOR NEXT ITERATION:
- Fix subprocess execution

PRIORITY: HIGH - Debug test

---
*Generated by PixelPilot Agent 3 Browser Testing*
"""
        
        print("üìñ Step 1: Fetching page content...")
        # Fetch page content to find anchor point
        result = await notion_tool.fetch_notion_page(pixelpilot_page_id)
        
        if result.get("success"):
            content = result.get("content", "")
            print("‚úÖ Page content fetched")
            
            # Extract text content
            if isinstance(content, list) and len(content) > 0:
                raw_text = content[0].text if hasattr(content[0], 'text') else str(content[0])
            else:
                raw_text = str(content)
            
            print("üìù Step 2: Parsing JSON...")
            # Parse JSON to get markdown content
            parsed = json.loads(raw_text)
            actual_content = parsed.get("text", "")
            
            # Extract content between <content> tags
            if "<content>" in actual_content and "</content>" in actual_content:
                start = actual_content.find("<content>") + len("<content>")
                end = actual_content.find("</content>")
                markdown_content = actual_content[start:end].strip()
            else:
                markdown_content = actual_content
            
            print("üéØ Step 3: Finding anchor point...")
            # Find anchor point
            lines = markdown_content.split('\n')
            anchor_line = None
            
            for line in lines:
                if line.strip() and (line.startswith('#') or len(line.strip()) > 10):
                    anchor_line = line.strip()
                    break
            
            if anchor_line:
                # Create anchor
                if len(anchor_line) > 20:
                    anchor = anchor_line[:10] + "..." + anchor_line[-10:]
                else:
                    anchor = anchor_line + "..."
                
                print(f"‚úÖ Found anchor: {anchor}")
                
                print("üîó Step 4: Connecting to Notion...")
                await notion_tool._ensure_connected()
                print("‚úÖ Connected to Notion")
                
                print("üìù Step 5: Writing feedback...")
                # Write feedback
                write_result = await notion_tool.session.call_tool("notion-update-page", {
                    "data": {
                        "page_id": pixelpilot_page_id,
                        "command": "insert_content_after",
                        "selection_with_ellipsis": anchor,
                        "new_str": feedback_content
                    }
                })
                
                print(f"üìä Write result isError: {write_result.isError}")
                
                if not write_result.isError:
                    print("SUCCESS: Feedback written to pixelpilot document")
                    return True
                else:
                    error_text = write_result.content[0].text if write_result.content else "Unknown error"
                    print(f"ERROR: {error_text}")
                    return False
            else:
                print("ERROR: No anchor point found")
                return False
        else:
            print("ERROR: Failed to fetch page content")
            return False
        
    except Exception as e:
        print(f"ERROR: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        try:
            await notion_tool.exit_stack.aclose()
        except:
            pass

if __name__ == "__main__":
    result = asyncio.run(debug_agent3_notion_write())
    print(f"\nüéØ Debug Result: {'SUCCESS' if result else 'FAILED'}")
